# created on the first Deposit event that matches the id
# updated after every subsquent Deposit event that matches the id {sale}-{escrow}-{supply}-{token}
# captures all of the deposits for the same escrow, same sale, same token at the same redeemable supply
type RedeemableEscrowSupplyTokenDeposit @entity {
  id: ID! #{sale}-{escrow}-{supply}-{token}
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes! #sale from the id
  "RedeemableERC20ClaimEscrow entity"
  escrow: RedeemableERC20ClaimEscrow!
  "Escrow address"
  escrowAddress: Bytes!
  "List of RedeemableEscrowDeposit entities"
  deposits: [RedeemableEscrowDeposit!]
  "List of RedeemableEscrowDepositor entities"
  depositors: [RedeemableEscrowDepositor!] #change to Array of depositors
  "List of addresses of depositors"
  depositorAddress: [Bytes!] #Deposit.depositor
  "List of RedeemableEscrowSupplyTokenWithdrawer entities"
  withdraws: [RedeemableEscrowSupplyTokenWithdrawer!]
  "ERC20 token entity"
  token: ERC20!
  "Erc20 token address"
  tokenAddress: Bytes!
  "Total redeemable supply"
  redeemableSupply: BigInt! #Deposit.supply
  # INCREASED by Deposit.amount every time there is a Deposit that matches the id - {sale}-{escrow}-{supply}-{token}
  # DESCREASED by Undeposit.amount every time there is an Undeposit that matches the id. - {sale}-{escrow}-{supply}-{token}
  # DECREASED by Withdraw.amount every time there is a Withraw that matches the id. - {sale}-{escrow}-{supply}-{token}
  "Total deposited amount"
  totalDeposited: BigInt! #increase with deposits
  "Total Reamining amount"
  totalRemaining: BigInt! #increase with deposits and decreases with withdraws/undeposits
}

type RedeemableEscrowSupplyTokenWithdrawer @entity {
  id: ID! #{sale}-{escrow}-{supply}-{token}-{withdrawer}
  "RedeemableEscrowSupplyTokenDeposit entity"
  deposit: RedeemableEscrowSupplyTokenDeposit #the {sale}-{escrow}-{supply}-{token} that this withdrawer is linked to
  "Withdrawer address"
  withdrawerAddress: Bytes! # Withdraw.withdrawer
  "Redeemable balance of withdrawer"
  redeemableBalance: BigInt! #redeeamble.balanceOf(withdrawerAddress). should already be on the Holder
  "List of RedeemableEscrowWithdraw entities"
  withdraws: [RedeemableEscrowWithdraw!] #all Withdraw events for this withdrawer, for the linked RedeemableEscrowSupplyTokenDeposit
  "Total amount withdrawn by withdrawer"
  totalWithdrawn: BigInt! #increased by Withdraw.amount with every Withdraw event that matches the id {sale}-{escrow}-{supply}-{token}-{withdrawer}
  "Amount against which RedeemableEscrowWithdraw emits"
  totalWithdrawnAgainst: BigInt! # update with the totalDeposited of the linked SupplyTokenDeopsit every time there is a withdraw that matches {sale}-{escrow}-{supply}-{token}-{withdrawer}
  "Amount claimable by withdrawer"
  claimable: BigInt! # ((RedeemableEscrowSupplyTokenDeposit.totalDeposited - totalWithdrawnAgainst) * (redeemable.balanceOf(withdrawer)) / supply
}