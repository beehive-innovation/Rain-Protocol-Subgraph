type SaleFactory @entity{
    id: ID! #factory address
    address: Bytes! #factory address
    implementation: Bytes! #implementation address from Implementation event
    children: [Sale!] #all the children that were deployed by this factory
    redeemableERC20Factory: Bytes #from Contract.config.redeemableERC20Factory on first child's Construct event
}

type Sale @entity{
    id: ID! #Sale contract address
    address: Bytes! #Sale contract address
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
    deployer: Bytes! #address of the deployer - get from event Initialize.sender
    factory: SaleFactory! #the factory that deployed this contract
    token: RedeemableERC20 #from Intialize.token
    reserve: ERC20 #from Initialize.config.reserve
    canStartStateConfig: CanStartStateConfig #from Initialize.config.canStartStateConfig
    canEndStateConfig: CanEndStateConfig #from Initialize.config.canEndStateConfig
    calculatePriceStateConfig: CalculatePriceStateConfig #from Initialize.config.calculatePriceStateConfig
    recipient: Bytes #from Initialize.config.recipient
    cooldownDuration: BigInt #from Initialize.config.cooldownDuration
    minimumRaise: BigInt #from Initialize.config.minimumRaise
    dustSize: BigInt #from Intialize.config.dustSize
    startEvent: SaleStart #from Start event on Sale
    endEvent: SaleEnd #from End event on Sale
    buys: [SaleBuy!] #all buy events
    refunds: [SaleRefund!] #all refund events
    # extra calculated fields
    unitsAvailable: BigInt # token.balanceOf(Sale.address) - initially set on the Initialize event, then updates after every Buy/Refund event.
    totalRaised: BigInt # get this by adding totalIn from all SaleBuy entities, and subtracting totalOut from all SaleRefund entities
    percentRaised: BigDecimal #totalRaised / minimumRaise
    totalFees: BigInt # get by adding all SaleBuy.fee and subtracting all SaleRefund.fee
    saleStatus: Int #starts at SaleStatus.Pending, Start event moves it to Active, End event provides the last saleStatus (will be Success/Fail)
}

type SaleRedeemableERC20 @entity{
    id: ID! #address of token
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
    symbol: String
    totalSupply: BigInt!
    decimals: Int
    name: String
    tier: TierContract!
    minimumTier: BigInt!
}

# from Start event on Sale
type SaleStart @entity{
    id: ID! #txHash
    block: BigInt! #block of the event
    transactionHash: Bytes! #txHash of the event
    timestamp: BigInt! #timestamp of event
    saleContract: Sale! #Sale that emitted the event
    sender: Bytes!
}

# from End event on Sale
type SaleEnd @entity{
    id: ID! #txHash
    block: BigInt! #block of the event
    transactionHash: Bytes! #txHash of the event
    timestamp: BigInt! #timestamp of event
    saleContract: Sale! #Sale that emitted the event
    sender: Bytes!
    saleStatus: Int! #get from event End.saleStatus
}

# from the Buy event on Sale
type SaleBuy @entity{
    id: ID! #txHash
    block: BigInt! #block of the event
    transactionHash: Bytes! #txHash of the event
    timestamp: BigInt! #timestamp of event
    saleContract: Sale! #Sale that emitted the event
    saleContractAddress: Bytes! #address of the sale contract
    feeRecipient: SaleFeeRecipient! # created/referenced by id {Sale.address}+{Buy.feeRecipient}
    feeRecipientAddress: Bytes! #from Buy.feeRecipient
    fee: BigInt! #from Buy.fee
    minimumUnits: BigInt! #from Buy.minimumUnits
    desiredUnits: BigInt! #from Buy.desiredUnits
    maximumPrice: BigInt! #from Buy.maximumPrice
    receipt: SaleReceipt! #from Buy.receipt
    totalIn: BigInt! #from Buy.receipt.units * Buy.receipt.price / (1 * 10e18)
}

# from the Refund event on Sale
type SaleRefund @entity{
    id: ID! #txHash
    block: BigInt! #block of the event
    transactionHash: Bytes! #txHash of the event
    timestamp: BigInt! #timestamp of event
    saleContract: Sale! #Sale that emitted the event
    saleContractAddress: Bytes! #address of the sale contract
    fee: BigInt! #from refunds.fee
    feeRecipient: SaleFeeRecipient! # created/referenced by id {Sale.address}+{Refund.feeRecipient}
    feeRecipientAddress: Bytes! #from Buy.feeRecipient
    receipt: SaleReceipt! #from {Sale.address}+{receipt.id}
    totalOut: BigInt! #from Buy.receipt.units * Buy.receipt.price / (1 * 10e18)
}

type SaleReceipt @entity{ 
    id: ID! #{Sale.address}+{receipt.id}
    receiptId: BigInt! #from receipt.id
    feeRecipient: Bytes! #receipt.feeRecipient
    fee: BigInt! #receipt.fee
    units: BigInt! #receipt.units
    price: BigInt! #receipt.price
}

# An entity to represent one feeRecipient for one Sale. 
# Gets created upon the first Buy event that references a new feeRecipient.
# Gets updated after every Buy or Refund that references an existing feeRecipient.
type SaleFeeRecipient @entity{
    id: ID! #{Sale.address}+{feeRecipient}
    address: Bytes! 
    totalFees: BigInt! #total fees for this recipient for this Sale. Get by adding all SaleFeeRecipient.buys.fee and subtracting all SaleFeeRecipient.refunds.fee
    buys: [SaleBuy!]! #all buys that reference this feeRecipient
    refunds: [SaleRefund!]! #all refunds that reference this feeRcipient
}

enum SaleStatus {
    Pending
    Active
    Success
    Fail
}

