type GatedNFTFactory @entity {
    id: ID! #factory address
    address: Bytes! #factory address
    implementation: Bytes! #implementation address from Implementation event
    children: [GatedNFT!] #all the children that were deployed by this factory
}

type GatedNFT implements INotice @entity {
    id: ID! #contract address
    address: Bytes! #contract address
    deployBlock: BigInt
    deployTimestamp: BigInt
    creator: Bytes #from event CreatedGatedNFT.creator
    name: String
    symbol: String
    description: String
    animationUrl: String
    imageUrl: String
    animationHash: Bytes
    imageHash: Bytes
    owner: Bytes #set with intial config, updated after every OwnershipTransferred event - use OwnershipTransferred.newOwner
    tier: TierContract #link to a tier contract if we have already indexed it, otherwise create an UnknownTier
    minimumStatus: BigInt
    maxPerAddress: BigInt
    transferrable: Int
    maxMintable: BigInt
    royaltyRecipient: Bytes #set in intial config, updated after every RoyaltyRecipientUpdated event
    royaltyBPS: BigInt
    royaltyPercent: BigDecimal # = royaltyBPS / 100
    royaltyRecipientHistory: [UpdatedRoyaltyRecipient!]
    ownershipHistory: [OwnershipTransferred!]
    notices: [Notice!]
}

type UpdatedRoyaltyRecipient @entity {
    id: ID! #tx hash
    block: BigInt
    timestamp: BigInt
    nftContract: GatedNFT! #contract that emitted the event
    origin: Bytes! #event.transaction.from
    newRoyaltyRecipient: Bytes! #from event.royaltyRecipient
}

type OwnershipTransferred @entity {
    id: ID! #txHash
    block: BigInt
    timestamp: BigInt
    emitter: Bytes! #contract that emitted the event
    sender: Bytes! #sender of the tx
    oldOwner: Bytes! #from event.oldOwner
    newOwner: Bytes! #from event.newOwner
}

