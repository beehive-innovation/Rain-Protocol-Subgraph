################## RedeemableERC20ClaimEscrow

type RedeemableERC20ClaimEscrow implements INotice @entity {
  "Address of the escrow contract"
  id: ID! # address of the escrow contract
  "Address of the escrow contract"
  address: Bytes! #address of the escrow contract
  "List of RedeemableEscrowPendingDeposit entities"
  pendingDeposits: [RedeemableEscrowPendingDeposit!]
  "List of RedeemableEscrowDeposit entities"
  deposits: [RedeemableEscrowDeposit!]
  "List of RedeemableEscrowUndeposit entities"
  undeposits: [RedeemableEscrowUndeposit!]
  "List of RedeemableEscrowWithdraw entities"
  withdraws: [RedeemableEscrowWithdraw!]
  "List of RedeemableEscrowPendingDepositorToken entities"
  pendingDepositorTokens: [RedeemableEscrowPendingDepositorToken!]
  "List of RedeemableEscrowSupplyTokenDeposit entities"
  supplyTokenDeposits: [RedeemableEscrowSupplyTokenDeposit!]
  "List of RedeemableEscrowSupplyTokenDepositor entities"
  supplyTokenDepositors: [RedeemableEscrowSupplyTokenDepositor!]
  "List of RedeemableEscrowSupplyTokenWithdrawer entities"
  supplyTokenWithdrawers: [RedeemableEscrowSupplyTokenWithdrawer!]
  "List of RedeemableEscrowDepositor entities"
  depositors: [RedeemableEscrowDepositor!]
  "List of RedeemableEscrowWithdrawer entities"
  withdrawers: [RedeemableEscrowWithdrawer!]
  "List of Notice entities"
  notices: [Notice!]
}

# represents one depositor for one escrow
type RedeemableEscrowDepositor @entity {
  id: ID! # {escrow address}-{address}
  "Depositers address"
  address: Bytes!
  "List of RedeemableEscrowPendingDepositorToken entities"
  pendingDepositorTokens: [RedeemableEscrowPendingDepositorToken!] #linked by entities with this depositor
  "List of RedeemableEscrowSupplyTokenDeposit entities"
  supplyTokenDeposits: [RedeemableEscrowSupplyTokenDeposit!] # linked by entities with this depositor
  "List of RedeemableEscrowPendingDeposit entities"
  pendingDeposits: [RedeemableEscrowPendingDeposit!] # linked by entities with this depositor
  "List of RedeemableEscrowDeposit entities"
  deposits: [RedeemableEscrowDeposit!] # linked by entities with this depositor
  "List of RedeemableEscrowUndeposit entities"
  undeposits: [RedeemableEscrowUndeposit!] # linked by entities with this depositor
}

# represents one withdrawer, across all sales for the same escrow
type RedeemableEscrowWithdrawer @entity {
  id: ID! # {escrow address}-{wallet address}
  "Address of withdrawer"
  address: Bytes!
  "RedeemableERC20ClaimEscrow entity"
  escrow: RedeemableERC20ClaimEscrow!
  "Address of escrow"
  escrowAddress: Bytes!
  "List of RedeemableEscrowWithdraw"
  withdraws: [RedeemableEscrowWithdraw!]
}

# created on the first PendingDposit event that matches the id {sale}-{escrow}-{depositor}-{token}
# represents all of the pending deposits for one escrow, one sale, one depositor
# totalDeposited updated with every PendingDeposit event that matches the id
# swept updated with every Deposit event that matches the id
type RedeemableEscrowPendingDepositorToken @entity {
  id: ID! #{sale}-{escrow}-{depositor}-{token}
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes! #sale from the id
  "Escrow entity"
  escrow: RedeemableERC20ClaimEscrow!
  "Escrow Address"
  escrowAddress: Bytes!
  "RedeemableEscrowDepositor entity"
  depositor: RedeemableEscrowDepositor!
  "Depositor address"
  depositorAddress: Bytes!
  "List of RedeemableEscrowPendingDeposit entities"
  pendingDeposits: [RedeemableEscrowPendingDeposit!]
  "ERC20 token address"
  token: ERC20!
  "ERC20 token address"
  tokenAddress: Bytes!
  "Total amount deposited by depositor"
  totalDeposited: BigInt! #increased by PendingDeposit.amount every time there is a PendingDeposit that matches the id
  "Is swept"
  swept: Boolean #Starts as False - on Sweep event with matching {sale}-{escrow}-{depositor}-{token}, changes to True.
}

# created on the first Deposit event that matches the id
# updated after every subsquent Deposit event that matches the id {sale}-{escrow}-{supply}-{token}
# captures all of the deposits for the same escrow, same sale, same token at the same redeemable supply
type RedeemableEscrowSupplyTokenDeposit @entity {
  id: ID! #{sale}-{escrow}-{supply}-{token}
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes! #sale from the id
  "RedeemableERC20ClaimEscrow entity"
  escrow: RedeemableERC20ClaimEscrow!
  "Escrow address"
  escrowAddress: Bytes!
  "List of RedeemableEscrowDeposit entities"
  deposits: [RedeemableEscrowDeposit!]
  "List of RedeemableEscrowDepositor entities"
  depositors: [RedeemableEscrowDepositor!] #change to Array of depositors
  "List of addresses of depositors"
  depositorAddress: [Bytes!] #Deposit.depositor
  "List of RedeemableEscrowSupplyTokenWithdrawer entities"
  withdraws: [RedeemableEscrowSupplyTokenWithdrawer!]
  "ERC20 token entity"
  token: ERC20!
  "Erc20 token address"
  tokenAddress: Bytes!
  "Total redeemable supply"
  redeemableSupply: BigInt! #Deposit.supply
  # INCREASED by Deposit.amount every time there is a Deposit that matches the id - {sale}-{escrow}-{supply}-{token}
  # DESCREASED by Undeposit.amount every time there is an Undeposit that matches the id. - {sale}-{escrow}-{supply}-{token}
  # DECREASED by Withdraw.amount every time there is a Withraw that matches the id. - {sale}-{escrow}-{supply}-{token}
  "Total deposited amount"
  totalDeposited: BigInt! #increase with deposits
  "Total Reamining amount"
  totalRemaining: BigInt! #increase with deposits and decreases with withdraws/undeposits
}

type RedeemableEscrowSupplyTokenDepositor @entity {
  id: ID! #{sale}-{escrow}-{supply}-{token}-{depositor}
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes! #sale from the id
  "RedeemableERC20ClaimEscrow entity"
  escrow: RedeemableERC20ClaimEscrow!
  "Escrow address"
  escrowAddress: Bytes!
  "List of RedeemableEscrowDeposit entities"
  deposits: [RedeemableEscrowDeposit!]
  "RedeemableEscrowDepositor entities"
  despositor: RedeemableEscrowDepositor!
  "Depositors address"
  depositorAddress: Bytes! #Deposit.depositor
  "List of RedeemableEscrowUndeposit entities"
  undeposits: [RedeemableEscrowUndeposit!] # all undeposits for this {sale}-{escrow}-{supply}-{token}-{depositor}
  "ERC20 token entity"
  token: ERC20!
  "ERC20 token address"
  tokenAddress: Bytes!
  "Total redeemable supply"
  redeemableSupply: BigInt! #Deposit.supply
  # INCREASED by Deposit.amount every time there is a Deposit that matches the id - {sale}-{escrow}-{supply}-{token}-{depositor}
  "Total deposited amount"
  totalDeposited: BigInt!
  # INCREASED by Deposit.amount every time there is a Deposit that matches the id - {sale}-{escrow}-{supply}-{token}-{depositor}
  # DECREASED by Undeposit.amount every time there is an Undeposit that matches the id. - {sale}-{escrow}-{supply}-{token}-{depositor}
  "Total remaining amount"
  totalRemaining: BigInt!
}

type RedeemableEscrowSupplyTokenWithdrawer @entity {
  id: ID! #{sale}-{escrow}-{supply}-{token}-{withdrawer}
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes!
  "RedeemableEscrowSupplyTokenDeposit entity"
  deposit: RedeemableEscrowSupplyTokenDeposit #the {sale}-{escrow}-{supply}-{token} that this withdrawer is linked to
  "Withdrawer address"
  withdrawerAddress: Bytes! # Withdraw.withdrawer
  "Redeemable balance of withdrawer"
  redeemableBalance: BigInt! #redeeamble.balanceOf(withdrawerAddress). should already be on the Holder
  "List of RedeemableEscrowWithdraw entities"
  withdraws: [RedeemableEscrowWithdraw!] #all Withdraw events for this withdrawer, for the linked RedeemableEscrowSupplyTokenDeposit
  "Total amount withdrawn by withdrawer"
  totalWithdrawn: BigInt! #increased by Withdraw.amount with every Withdraw event that matches the id {sale}-{escrow}-{supply}-{token}-{withdrawer}
  "Amount against which RedeemableEscrowWithdraw emits"
  totalWithdrawnAgainst: BigInt! # update with the totalDeposited of the linked SupplyTokenDeopsit every time there is a withdraw that matches {sale}-{escrow}-{supply}-{token}-{withdrawer}
  "Amount claimable by withdrawer"
  claimable: BigInt! # ((RedeemableEscrowSupplyTokenDeposit.totalDeposited - totalWithdrawnAgainst) * (redeemable.balanceOf(withdrawer)) / supply
}

# created for each PendingDeposit event
type RedeemableEscrowPendingDeposit @entity {
  id: ID! #txHash
  depositor: RedeemableEscrowDepositor
  depositorAddress: Bytes!
  escrow: RedeemableERC20ClaimEscrow! #escrow contract that emitted the event
  escrowAddress: Bytes! #escrow contract that emitted the event
  iSale: Isale
  iSaleAddress: Bytes! #from PendingDeposit.sale
  redeemable: RedeemableERC20
  token: ERC20
  tokenAddress: Bytes!
  amount: BigInt!
}

# created for Deposit event
type RedeemableEscrowDeposit @entity {
  id: ID! #txHash
  "RedeemableEscrowDepositor entity"
  depositor: RedeemableEscrowDepositor
  "Depositor address"
  depositorAddress: Bytes!
  "RedeemableERC20ClaimEscrow entity"
  escrow: RedeemableERC20ClaimEscrow! #escrow contract that emitted the event
  "Escrow address"
  escrowAddress: Bytes! #escrow contract that emitted the event
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes! #from Deposit.sale
  "RedeemableERC20 entity"
  redeemable: RedeemableERC20
  "ERC20 token entity"
  token: ERC20!
  "ERC20 token address"
  tokenAddress: Bytes!
  "Total redeemable supply"
  redeemableSupply: BigInt! #from Deposit.supply
  "Amount of tokens deposited"
  tokenAmount: BigInt! #from Deposit.amount
}

# created for each Undeposit event
type RedeemableEscrowUndeposit @entity {
  id: ID! #txHash
  "Undepositors address"
  sender: Bytes! #from Undeposit.sender
  "RedeemableERC20ClaimEscrow entity"
  escrow: RedeemableERC20ClaimEscrow! #escrow contract that emitted the event
  "Escrow address"
  escrowAddress: Bytes! #escrow contract that emitted the event
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes!
  "ERC20 token entity"
  token: ERC20! #linked by Undeposit.token
  "ERC20 token address"
  tokenAddress: Bytes! #from Undeposit.token
  "Total redeemable supply"
  redeemableSupply: BigInt! #from Undeposit.supply
  "Undeposited amount"
  tokenAmount: BigInt! #from Undeposit.amount
}

# created for each Withdraw event
type RedeemableEscrowWithdraw @entity {
  id: ID! #txHash
  "Withdrawer address"
  withdrawer: Bytes! #from Withdraw.withdrawer
  "RedeemableERC20ClaimEscrow entity"
  escrow: RedeemableERC20ClaimEscrow! #escrow contract that emitted the event
  "Escrow address"
  escrowAddress: Bytes! #escrow contract that emitted the event
  "Sale entity"
  iSale: Isale
  "Sale address"
  iSaleAddress: Bytes!
  "RedeemableERC20 entity"
  redeemable: RedeemableERC20! #linked by Withdraw.redeemable
  "ERC20 token entity"
  token: ERC20! #Linked by Withdraw.token
  "ERC20 token address"
  tokenAddress: Bytes! #from Withdraw.token
  "Total redeemable supply"
  redeemableSupply: BigInt! #from Withdraw.supply
  "Amount withdrawn"
  tokenAmount: BigInt! #from Withdraw.amount
}

type UnknownSale implements Isale @entity {
  id: ID!
  "Unknown sale address"
  address: Bytes
  "salestatu of Sale"
  saleStatus: Int
}

type RedeemableERC20 @entity {
  id: ID!
  deployer: Bytes
  admin: Bytes
  factory: Bytes #redeemableERC20Factory()
  grantedReceivers: [Bytes!]
  grantedSenders: [Bytes!]
  redeems: [Redeem!]! #Redeem event in RedeemableERC20.sol
  treasuryAssets: [TreasuryAsset!]
  minimumTier: BigInt
  symbol: String
  totalSupply: BigInt
  decimals: Int
  name: String
  holders: [Holder!]
  deployBlock: BigInt #the block the contract was deployed
  deployTimestamp: BigInt #the timestamp the contract was deployed
  tier: TierContract
  saleAddress: Bytes
  escrowSupplyTokenWithdrawers: [RedeemableEscrowSupplyTokenWithdrawer!]
}
################## RedeemableERC20ClaimEscrow
