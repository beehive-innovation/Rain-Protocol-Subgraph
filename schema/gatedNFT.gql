type GatedNFTFactory {
    id: ID! #factory address
    address: Bytes! #factory address
    implementation: Bytes! #implementation address from Implementation event
    children: [GatedNFT!]! #all the children that were deployed by this factory
}

type GatedNFT {
    id: ID! #contract address
    address: Bytes! #contract address
    creator: Bytes! #from event CreatedGatedNFT.creator
    name: String!
    symbol: String!
    description: String!
    animationUrl: String!
    imageUrl: String!
    animationHash: Bytes!
    imageHash: Bytes!
    owner: Bytes! #set with intial config, updated after every OwnershipTransferred event - use OwnershipTransferred.newOwner
    tier: TierContract! #link to a tier contract if we have already indexed it, otherwise create an UnknownTier
    minimumStatus: BigInt!
    maxPerAddress: BigInt!
    transferrable: Transferrable
    maxMintable: BigInt!
    royaltyRecipient: Bytes! #set in intial config, updated after every RoyaltyRecipientUpdated event
    royaltyBPS: BigInt!
    royaltyPercent: BigDecimal! # = royaltyBPS / 100
}

type UpdatedRoyaltyRecipient {
    id: ID! #tx hash
    nftContract: GatedNFT! #contract that emitted the event
    origin: Bytes! #event.transaction.from
    newRoyaltyRecipient: Bytes! #from event.royaltyRecipient
}

type OwnershipTransferredEvent {
    id: ID! #txHash
    emitter: Bytes! #contract that emitted the event
    sender: Bytes! #sender of the tx
    oldOwner: Bytes! #from event.oldOwner
    newOwner: Bytes! #from event.newOwner
}

enum Transferrable {
    NonTransferrable,
    Transferrable,
    TierGatedTransferrable
}