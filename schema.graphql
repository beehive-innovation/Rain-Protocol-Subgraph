type TrustFactory @entity{
    id: ID! #address of the TrustFactory
    trustCount: BigInt
    balancerFactory: Bytes
    crpFactory: Bytes
    redeemableERC20Factory: Bytes
    seedERC20Factory: Bytes 
    bPoolFeeEscrow: Bytes
    trusts: [Trust!]
}

type Trust @entity{
    id: ID! #address of trust contract - from TrustFactory NewContract events
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
    creator: Bytes! #Trust.creator()
    contracts: Contract
    factory: Bytes!
    distributionProgress: DistributionProgress
    creatorFundsReleaseTimeout: BigInt
    maxRaiseDuration: BigInt
    trustParticipants: [TrustParticipant!]
    notices: [Notice!]
}

# event Notice(address indexed sender, bytes data);
type Notice @entity{
    id: ID! #tx hash
    trust: Trust! #the trust that emitted the event
    sender: Bytes! #the address of the sender, from the event
    data: Bytes! #from the event
    deployBlock: BigInt! #block of event
    deployTimestamp: BigInt! #timestamp of event
}

type Contract @entity {
    id: ID!
    reserveERC20: ReserveERC20 #Trust.getContracts() => address reserveERC20
    redeemableERC20: RedeemableERC20 #Trust.getContracts() => address redeemableERC20
    redeemableERC20Pool: RedeemableERC20Pool #Trust.getContracts() => address redeemableERC20Pool
    seeder: SeedERC20 #Trust.getContracts() => address seeder
    tier: Bytes #Trust.getContracts() => address tier
    crp: CRP #Trust.getContracts() => address crp
    pool: Pool #Trust.getContracts() => address pool
}

type DistributionProgress @entity {
    id:ID!
    distributionStatus: Int #Trust.getDistributionProgress() => DistributionStatus distributionStatus
    distributionStartdeployBlock: BigInt #Trust.getDistributionProgress() => uint32 distributionStartBlock
    distributionEnddeployBlock: BigInt #Trust.getDistributionProgress() => uint32 distributionEndBlock
    minimumTradingDuration: BigInt #RedeemableERC20Pool.minimumTradingDuration()
    poolReserveBalance: BigInt #Trust.getDistributionProgress() => uint256 poolReserveBalance
    poolTokenBalance: BigInt #Trust.getDistributionProgress() => uint256 poolTokenBalance
    minimumCreatorRaise: BigInt #Trust.getDistributionProgress() => uint256 minimumCreatorRaise
    finalWeight: BigInt #RedeemableERC20Pool.finalWeight()
    initialValuation: BigInt
    finalValuation: BigInt #RedeemableERC20Pool.finalValuation()
    successPoolBalance: BigInt #Trust.successBalance()
    finalBalance: BigInt #Trust.finalBalance()
    reserveInit: BigInt #Trust.getDistributionProgress() => uint256 reserveInit
    redeemInit: BigInt #Trust.getDistributionProgress() => uint256 redeemInit
    minimumRaise: BigInt #minimumCreatorRaise + redeemInit + Trust.SeedERC20.seederFee
    amountRaised: BigInt # = poolReserveBalance - reserveInit
    percentRaised: BigDecimal # = amountRaised / minimumRaise
    percentAvailable: BigDecimal # = poolTokenBalance / RedeemableERC20.totalSupply
}

type CRP @entity{
    id:ID!
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type RedeemableERC20Pool @entity{
    id: ID!
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type ReserveERC20 @entity{
    id: ID!
    symbol: String
    totalSupply: BigInt
    decimals: Int
    name: String
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type Redeemable @entity{
    id: ID!
    symbol: String!
    totalSupply: BigInt!
    decimals: Int!
    name: String!
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type Pool @entity{
    id: ID!
    trust: Trust! #the trust that is the owner of this pool
    reserve: ReserveERC20! #the reserve token for this trust
    redeemable: RedeemableERC20! #the redeemable token for this trust
    poolBalanceReserve: BigInt! #Trust.getDistributionProgress() => uint256 poolReserveBalance
    poolTokenBalance: BigInt! #Trust.getDistributionProgress() => uint256 poolTokenBalance
    numberOfSwaps: BigInt!
    swaps: [Swap!]!
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type Swap @entity{
    id: ID!
    caller: Bytes!
    tokenIn: Bytes!
    tokenInSym: String!
    tokenOut: Bytes!
    tokenOutSym: String!
    tokenAmountIn: BigInt!
    tokenAmountOut: BigInt!
    pool: Pool!
    userAddress: Bytes!
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type RedeemableERC20 @entity {
    id: ID!
    redeems: [Redeem!] #Redeem event in RedeemableERC20.sol
    treasuryAssets: [TreasuryAsset!]
    minimumTier: Int
    # redeemables: [Redeemable!]! #RedeemableERC20.getRedeemables() => returns max 8 addresses for tokens
    #...Token interface fields
    symbol: String
    totalSupply: BigInt
    decimals: Int
    name: String
    holders: [Holder!]
    deployBlock: BigInt #the block the contract was deployed
    deployTimestamp: BigInt #the timestamp the contract was deployed
}

type Redeem @entity {
    id: ID!
    trust: Trust!
    caller: Bytes! #address indexed redeemer
    treasuryAsset: TreasuryAsset!
    redeemableERC20: RedeemableERC20! #address indexed redeemable
    redeemAmount: BigInt! #redeemAmounts[0]
    treasuryAssetAmount: BigInt! #redeemAmounts[1]
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type SeedERC20 @entity{
    id: ID! #address of SeedERC20
    # Update after Trust construction
    factory: Bytes #Trust.seedERC20Factory()
    seederFee: BigInt #Trust.seederFee()
    seederUnits: BigInt #Trust.seederUnits()
    seedFeePerUnit: BigInt # = seederFee / seederUnits
    seederCooldownDuration: BigInt #Trust.seederCooldownDuration()
    # Update after Seed event
    seederUnitsAvail: BigInt #SeedERC20.balanceOf(this)
    seededAmount: BigInt #ReserveERC20.balanceOf(this)
    percentSeeded: BigInt #SeedERC20.seededAmount / Trust.redeemInit()
    seeds: [Seed!] #Seed events
    unseeds: [Unseed!] #Unseed events
    #...Token interface fields. Update after Trust construction
    deployBlock: BigInt #the block the contract was deployed
    deployTimestamp: BigInt #the timestamp the contract was deployed
    symbol: String
    totalSupply: BigInt
    decimals: Int
    name: String
    # Update after Transfer events
    holders: [Holder!] #addresses of token holders
    # Update after Redeem events for this SeedERC20
    redeemSeed: [RedeemSeed!] #redeem
}

type Holder @entity {
    id:ID!

    address: Bytes!

    balance: BigInt!
}

type Seed @entity {
    id: ID!
    caller: Bytes! #the address that was transferred to/from
    seedERC20: SeedERC20! #the seedERC20 that emitted the event
    seedAmount: BigInt! #the reserve amount that was transferred
    seedUnits: BigInt! #the amount of SeedERC20 that was transferred
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type Unseed @entity {
    id: ID!
    caller: Bytes! #the address that was transferred to/from
    seedERC20: SeedERC20! #the seedERC20 that emitted the event
    seedAmount: BigInt! #the reserve amount that was transferred
    seedUnits: BigInt! #the amount of SeedERC20 that was transferred
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type TrustParticipant @entity {
    id: ID!
    user: Bytes! #address of user
    trust: Trust! #map by address of the trust
    # Update after every Swap event from Pool, and after every Redeem event for this RedeemableERC20 (as this burns the token)
    tokenBalance: BigInt! #RedeemableERC20.balanceOf(this.user.address)
    swaps: [Swap!] #Swaps for this.address
    # Seed events for the SeedERC20 associated with this trust, for this.address
    seeds: [Seed!]
    unSeeds: [Unseed!]
    # Seed redeem events for the SeedERC20 associated with this trust, for this.address
    redeemSeeds: [RedeemSeed!]
    # Update after Transfer events for SeedERC20
    seedBalance: BigInt! #SeedERC20.balanceOf(this.user.address)
    seedFeeClaimable: BigInt! # = SeedERC20.balanceOf(this.user.address) * SeedERC20.seedFeePerUnit
    # Reedeem events for this trust, for this.address
    redeems: [Redeem!]
}

type RedeemSeed @entity {
    id: ID!
    caller: Bytes! #address indexed redeemer
    seedERC20: SeedERC20! #the SeedERC20 that emitted the event
    redeemAmount: BigInt! #redeemAmounts[0]
    reserveAmount: BigInt! #redeemAmounts[1]
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
}

type TreasuryAsset @entity {
    id:ID!
    callers: [TreasuryAssetCaller!]
    redeems: [Redeem!]
    trust: Trust!
    address: Bytes!
    # Update after TreasuryAsset event on RedeemableERC20
    redeemableERC20: RedeemableERC20! #the RedeemableERC20 that emitted the TreasuryAsset event for this redeemable
    # Update after TreasuryAsset event on RedeemableERC20, and after Transfer events for this token
    balance: BigInt #this.balanceOf(RedeemableERC20.address())
    redemptionRatio: BigInt!
    #...Token interface fields
    # Update after TreasuryAsset event on RedeemableERC20
    deployBlock: BigInt! #the block the contract was deployed
    deployTimestamp: BigInt! #the timestamp the contract was deployed
    symbol: String
    totalSupply: BigInt
    decimals: Int
    name: String
}

type TreasuryAssetCaller @entity {
    trustAddress: Bytes!
    redeemableERC20Address: Bytes!
    treasuryAsset: TreasuryAsset!
    id: ID!
    caller: Bytes!
    deployBlock: BigInt!
    deployTimestamp: BigInt!
}

