// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TrustFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TrustFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TrustFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TrustFactory", id.toString(), this);
  }

  static load(id: string): TrustFactory | null {
    return store.get("TrustFactory", id) as TrustFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trustCount(): BigInt {
    let value = this.get("trustCount");
    return value.toBigInt();
  }

  set trustCount(value: BigInt) {
    this.set("trustCount", Value.fromBigInt(value));
  }

  get trusts(): Array<string> | null {
    let value = this.get("trusts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trusts(value: Array<string> | null) {
    if (value === null) {
      this.unset("trusts");
    } else {
      this.set("trusts", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Trust extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Trust entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Trust entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Trust", id.toString(), this);
  }

  static load(id: string): Trust | null {
    return store.get("Trust", id) as Trust | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get contracts(): string {
    let value = this.get("contracts");
    return value.toString();
  }

  set contracts(value: string) {
    this.set("contracts", Value.fromString(value));
  }

  get distributionProgress(): string {
    let value = this.get("distributionProgress");
    return value.toString();
  }

  set distributionProgress(value: string) {
    this.set("distributionProgress", Value.fromString(value));
  }

  get trustParticipants(): Array<string> | null {
    let value = this.get("trustParticipants");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trustParticipants(value: Array<string> | null) {
    if (value === null) {
      this.unset("trustParticipants");
    } else {
      this.set(
        "trustParticipants",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get notices(): Array<string> | null {
    let value = this.get("notices");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set notices(value: Array<string> | null) {
    if (value === null) {
      this.unset("notices");
    } else {
      this.set("notices", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Notice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Notice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Notice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Notice", id.toString(), this);
  }

  static load(id: string): Notice | null {
    return store.get("Notice", id) as Notice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trust(): string {
    let value = this.get("trust");
    return value.toString();
  }

  set trust(value: string) {
    this.set("trust", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Contract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Contract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Contract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Contract", id.toString(), this);
  }

  static load(id: string): Contract | null {
    return store.get("Contract", id) as Contract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserveERC20(): string {
    let value = this.get("reserveERC20");
    return value.toString();
  }

  set reserveERC20(value: string) {
    this.set("reserveERC20", Value.fromString(value));
  }

  get redeemableERC20(): string {
    let value = this.get("redeemableERC20");
    return value.toString();
  }

  set redeemableERC20(value: string) {
    this.set("redeemableERC20", Value.fromString(value));
  }

  get redeemableERC20Pool(): string {
    let value = this.get("redeemableERC20Pool");
    return value.toString();
  }

  set redeemableERC20Pool(value: string) {
    this.set("redeemableERC20Pool", Value.fromString(value));
  }

  get seeder(): string | null {
    let value = this.get("seeder");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seeder(value: string | null) {
    if (value === null) {
      this.unset("seeder");
    } else {
      this.set("seeder", Value.fromString(value as string));
    }
  }

  get tier(): Bytes {
    let value = this.get("tier");
    return value.toBytes();
  }

  set tier(value: Bytes) {
    this.set("tier", Value.fromBytes(value));
  }

  get crp(): string {
    let value = this.get("crp");
    return value.toString();
  }

  set crp(value: string) {
    this.set("crp", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }
}

export class DistributionProgress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DistributionProgress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DistributionProgress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DistributionProgress", id.toString(), this);
  }

  static load(id: string): DistributionProgress | null {
    return store.get("DistributionProgress", id) as DistributionProgress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributionStatus(): i32 {
    let value = this.get("distributionStatus");
    return value.toI32();
  }

  set distributionStatus(value: i32) {
    this.set("distributionStatus", Value.fromI32(value));
  }

  get distributionStartBlock(): BigInt {
    let value = this.get("distributionStartBlock");
    return value.toBigInt();
  }

  set distributionStartBlock(value: BigInt) {
    this.set("distributionStartBlock", Value.fromBigInt(value));
  }

  get distributionEndBlock(): BigInt {
    let value = this.get("distributionEndBlock");
    return value.toBigInt();
  }

  set distributionEndBlock(value: BigInt) {
    this.set("distributionEndBlock", Value.fromBigInt(value));
  }

  get minimumTradingDuration(): BigInt {
    let value = this.get("minimumTradingDuration");
    return value.toBigInt();
  }

  set minimumTradingDuration(value: BigInt) {
    this.set("minimumTradingDuration", Value.fromBigInt(value));
  }

  get poolReserveBalance(): BigInt {
    let value = this.get("poolReserveBalance");
    return value.toBigInt();
  }

  set poolReserveBalance(value: BigInt) {
    this.set("poolReserveBalance", Value.fromBigInt(value));
  }

  get poolTokenBalance(): BigInt {
    let value = this.get("poolTokenBalance");
    return value.toBigInt();
  }

  set poolTokenBalance(value: BigInt) {
    this.set("poolTokenBalance", Value.fromBigInt(value));
  }

  get minimumCreatorRaise(): BigInt {
    let value = this.get("minimumCreatorRaise");
    return value.toBigInt();
  }

  set minimumCreatorRaise(value: BigInt) {
    this.set("minimumCreatorRaise", Value.fromBigInt(value));
  }

  get finalWeight(): BigInt {
    let value = this.get("finalWeight");
    return value.toBigInt();
  }

  set finalWeight(value: BigInt) {
    this.set("finalWeight", Value.fromBigInt(value));
  }

  get finalValuation(): BigInt {
    let value = this.get("finalValuation");
    return value.toBigInt();
  }

  set finalValuation(value: BigInt) {
    this.set("finalValuation", Value.fromBigInt(value));
  }

  get successPoolBalance(): BigInt {
    let value = this.get("successPoolBalance");
    return value.toBigInt();
  }

  set successPoolBalance(value: BigInt) {
    this.set("successPoolBalance", Value.fromBigInt(value));
  }

  get finalBalance(): BigInt {
    let value = this.get("finalBalance");
    return value.toBigInt();
  }

  set finalBalance(value: BigInt) {
    this.set("finalBalance", Value.fromBigInt(value));
  }

  get reserveInit(): BigInt {
    let value = this.get("reserveInit");
    return value.toBigInt();
  }

  set reserveInit(value: BigInt) {
    this.set("reserveInit", Value.fromBigInt(value));
  }

  get redeemInit(): BigInt {
    let value = this.get("redeemInit");
    return value.toBigInt();
  }

  set redeemInit(value: BigInt) {
    this.set("redeemInit", Value.fromBigInt(value));
  }

  get minimumRaise(): BigInt {
    let value = this.get("minimumRaise");
    return value.toBigInt();
  }

  set minimumRaise(value: BigInt) {
    this.set("minimumRaise", Value.fromBigInt(value));
  }

  get amountRaised(): BigInt {
    let value = this.get("amountRaised");
    return value.toBigInt();
  }

  set amountRaised(value: BigInt) {
    this.set("amountRaised", Value.fromBigInt(value));
  }

  get percentRaised(): BigDecimal {
    let value = this.get("percentRaised");
    return value.toBigDecimal();
  }

  set percentRaised(value: BigDecimal) {
    this.set("percentRaised", Value.fromBigDecimal(value));
  }

  get percentAvailable(): BigDecimal {
    let value = this.get("percentAvailable");
    return value.toBigDecimal();
  }

  set percentAvailable(value: BigDecimal) {
    this.set("percentAvailable", Value.fromBigDecimal(value));
  }
}

export class CRP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CRP entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CRP entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CRP", id.toString(), this);
  }

  static load(id: string): CRP | null {
    return store.get("CRP", id) as CRP | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RedeemableERC20Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemableERC20Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemableERC20Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemableERC20Pool", id.toString(), this);
  }

  static load(id: string): RedeemableERC20Pool | null {
    return store.get("RedeemableERC20Pool", id) as RedeemableERC20Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ReserveERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReserveERC20 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveERC20 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveERC20", id.toString(), this);
  }

  static load(id: string): ReserveERC20 | null {
    return store.get("ReserveERC20", id) as ReserveERC20 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (value === null) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(value as BigInt));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Redeemable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Redeemable entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Redeemable entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Redeemable", id.toString(), this);
  }

  static load(id: string): Redeemable | null {
    return store.get("Redeemable", id) as Redeemable | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trust(): string {
    let value = this.get("trust");
    return value.toString();
  }

  set trust(value: string) {
    this.set("trust", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get redeemable(): string {
    let value = this.get("redeemable");
    return value.toString();
  }

  set redeemable(value: string) {
    this.set("redeemable", Value.fromString(value));
  }

  get poolBalanceReserve(): BigInt {
    let value = this.get("poolBalanceReserve");
    return value.toBigInt();
  }

  set poolBalanceReserve(value: BigInt) {
    this.set("poolBalanceReserve", Value.fromBigInt(value));
  }

  get poolTokenBalance(): BigInt {
    let value = this.get("poolTokenBalance");
    return value.toBigInt();
  }

  set poolTokenBalance(value: BigInt) {
    this.set("poolTokenBalance", Value.fromBigInt(value));
  }

  get numberOfSwaps(): BigInt {
    let value = this.get("numberOfSwaps");
    return value.toBigInt();
  }

  set numberOfSwaps(value: BigInt) {
    this.set("numberOfSwaps", Value.fromBigInt(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    return value.toBytes();
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenInSym(): string {
    let value = this.get("tokenInSym");
    return value.toString();
  }

  set tokenInSym(value: string) {
    this.set("tokenInSym", Value.fromString(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    return value.toBytes();
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get tokenOutSym(): string {
    let value = this.get("tokenOutSym");
    return value.toString();
  }

  set tokenOutSym(value: string) {
    this.set("tokenOutSym", Value.fromString(value));
  }

  get tokenAmountIn(): BigInt {
    let value = this.get("tokenAmountIn");
    return value.toBigInt();
  }

  set tokenAmountIn(value: BigInt) {
    this.set("tokenAmountIn", Value.fromBigInt(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RedeemableERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemableERC20 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemableERC20 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemableERC20", id.toString(), this);
  }

  static load(id: string): RedeemableERC20 | null {
    return store.get("RedeemableERC20", id) as RedeemableERC20 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeems(): Array<string> {
    let value = this.get("redeems");
    return value.toStringArray();
  }

  set redeems(value: Array<string>) {
    this.set("redeems", Value.fromStringArray(value));
  }

  get treasuryAssets(): Array<string> | null {
    let value = this.get("treasuryAssets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set treasuryAssets(value: Array<string> | null) {
    if (value === null) {
      this.unset("treasuryAssets");
    } else {
      this.set("treasuryAssets", Value.fromStringArray(value as Array<string>));
    }
  }

  get minimumTier(): i32 {
    let value = this.get("minimumTier");
    return value.toI32();
  }

  set minimumTier(value: i32) {
    this.set("minimumTier", Value.fromI32(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get holders(): Array<string> | null {
    let value = this.get("holders");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set holders(value: Array<string> | null) {
    if (value === null) {
      this.unset("holders");
    } else {
      this.set("holders", Value.fromStringArray(value as Array<string>));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Redeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Redeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Redeem", id.toString(), this);
  }

  static load(id: string): Redeem | null {
    return store.get("Redeem", id) as Redeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trust(): string {
    let value = this.get("trust");
    return value.toString();
  }

  set trust(value: string) {
    this.set("trust", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get treasuryAsset(): string {
    let value = this.get("treasuryAsset");
    return value.toString();
  }

  set treasuryAsset(value: string) {
    this.set("treasuryAsset", Value.fromString(value));
  }

  get redeemableERC20(): string {
    let value = this.get("redeemableERC20");
    return value.toString();
  }

  set redeemableERC20(value: string) {
    this.set("redeemableERC20", Value.fromString(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get treasuryAssetAmount(): BigInt {
    let value = this.get("treasuryAssetAmount");
    return value.toBigInt();
  }

  set treasuryAssetAmount(value: BigInt) {
    this.set("treasuryAssetAmount", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SeedERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SeedERC20 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SeedERC20 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SeedERC20", id.toString(), this);
  }

  static load(id: string): SeedERC20 | null {
    return store.get("SeedERC20", id) as SeedERC20 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trust(): string {
    let value = this.get("trust");
    return value.toString();
  }

  set trust(value: string) {
    this.set("trust", Value.fromString(value));
  }

  get seederFee(): BigInt {
    let value = this.get("seederFee");
    return value.toBigInt();
  }

  set seederFee(value: BigInt) {
    this.set("seederFee", Value.fromBigInt(value));
  }

  get seederUnits(): i32 {
    let value = this.get("seederUnits");
    return value.toI32();
  }

  set seederUnits(value: i32) {
    this.set("seederUnits", Value.fromI32(value));
  }

  get seedFeePerUnit(): BigInt {
    let value = this.get("seedFeePerUnit");
    return value.toBigInt();
  }

  set seedFeePerUnit(value: BigInt) {
    this.set("seedFeePerUnit", Value.fromBigInt(value));
  }

  get seederCooldownDuration(): i32 {
    let value = this.get("seederCooldownDuration");
    return value.toI32();
  }

  set seederCooldownDuration(value: i32) {
    this.set("seederCooldownDuration", Value.fromI32(value));
  }

  get seederUnitsAvail(): BigInt | null {
    let value = this.get("seederUnitsAvail");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seederUnitsAvail(value: BigInt | null) {
    if (value === null) {
      this.unset("seederUnitsAvail");
    } else {
      this.set("seederUnitsAvail", Value.fromBigInt(value as BigInt));
    }
  }

  get seededAmount(): BigInt | null {
    let value = this.get("seededAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seededAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("seededAmount");
    } else {
      this.set("seededAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get percentSeeded(): BigDecimal | null {
    let value = this.get("percentSeeded");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set percentSeeded(value: BigDecimal | null) {
    if (value === null) {
      this.unset("percentSeeded");
    } else {
      this.set("percentSeeded", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get factory(): Bytes {
    let value = this.get("factory");
    return value.toBytes();
  }

  set factory(value: Bytes) {
    this.set("factory", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get holders(): Array<string> | null {
    let value = this.get("holders");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set holders(value: Array<string> | null) {
    if (value === null) {
      this.unset("holders");
    } else {
      this.set("holders", Value.fromStringArray(value as Array<string>));
    }
  }

  get seeds(): Array<string> | null {
    let value = this.get("seeds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set seeds(value: Array<string> | null) {
    if (value === null) {
      this.unset("seeds");
    } else {
      this.set("seeds", Value.fromStringArray(value as Array<string>));
    }
  }

  get unseeds(): Array<string> | null {
    let value = this.get("unseeds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set unseeds(value: Array<string> | null) {
    if (value === null) {
      this.unset("unseeds");
    } else {
      this.set("unseeds", Value.fromStringArray(value as Array<string>));
    }
  }

  get redeemSeeds(): Array<string> | null {
    let value = this.get("redeemSeeds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set redeemSeeds(value: Array<string> | null) {
    if (value === null) {
      this.unset("redeemSeeds");
    } else {
      this.set("redeemSeeds", Value.fromStringArray(value as Array<string>));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Holder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Holder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Holder", id.toString(), this);
  }

  static load(id: string): Holder | null {
    return store.get("Holder", id) as Holder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class Seed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Seed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Seed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Seed", id.toString(), this);
  }

  static load(id: string): Seed | null {
    return store.get("Seed", id) as Seed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get seedERC20(): string {
    let value = this.get("seedERC20");
    return value.toString();
  }

  set seedERC20(value: string) {
    this.set("seedERC20", Value.fromString(value));
  }

  get seedAmount(): BigInt {
    let value = this.get("seedAmount");
    return value.toBigInt();
  }

  set seedAmount(value: BigInt) {
    this.set("seedAmount", Value.fromBigInt(value));
  }

  get seedUnits(): BigInt {
    let value = this.get("seedUnits");
    return value.toBigInt();
  }

  set seedUnits(value: BigInt) {
    this.set("seedUnits", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Unseed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Unseed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Unseed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Unseed", id.toString(), this);
  }

  static load(id: string): Unseed | null {
    return store.get("Unseed", id) as Unseed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get seedERC20(): string {
    let value = this.get("seedERC20");
    return value.toString();
  }

  set seedERC20(value: string) {
    this.set("seedERC20", Value.fromString(value));
  }

  get seedAmount(): BigInt {
    let value = this.get("seedAmount");
    return value.toBigInt();
  }

  set seedAmount(value: BigInt) {
    this.set("seedAmount", Value.fromBigInt(value));
  }

  get seedUnits(): BigInt {
    let value = this.get("seedUnits");
    return value.toBigInt();
  }

  set seedUnits(value: BigInt) {
    this.set("seedUnits", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TrustParticipant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TrustParticipant entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TrustParticipant entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TrustParticipant", id.toString(), this);
  }

  static load(id: string): TrustParticipant | null {
    return store.get("TrustParticipant", id) as TrustParticipant | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get trust(): string {
    let value = this.get("trust");
    return value.toString();
  }

  set trust(value: string) {
    this.set("trust", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (value === null) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(value as Array<string>));
    }
  }

  get seeds(): Array<string> | null {
    let value = this.get("seeds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set seeds(value: Array<string> | null) {
    if (value === null) {
      this.unset("seeds");
    } else {
      this.set("seeds", Value.fromStringArray(value as Array<string>));
    }
  }

  get unSeeds(): Array<string> | null {
    let value = this.get("unSeeds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set unSeeds(value: Array<string> | null) {
    if (value === null) {
      this.unset("unSeeds");
    } else {
      this.set("unSeeds", Value.fromStringArray(value as Array<string>));
    }
  }

  get redeemSeeds(): Array<string> | null {
    let value = this.get("redeemSeeds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set redeemSeeds(value: Array<string> | null) {
    if (value === null) {
      this.unset("redeemSeeds");
    } else {
      this.set("redeemSeeds", Value.fromStringArray(value as Array<string>));
    }
  }

  get seedBalance(): BigInt {
    let value = this.get("seedBalance");
    return value.toBigInt();
  }

  set seedBalance(value: BigInt) {
    this.set("seedBalance", Value.fromBigInt(value));
  }

  get seedFeeClaimable(): BigInt {
    let value = this.get("seedFeeClaimable");
    return value.toBigInt();
  }

  set seedFeeClaimable(value: BigInt) {
    this.set("seedFeeClaimable", Value.fromBigInt(value));
  }

  get redeems(): Array<string> | null {
    let value = this.get("redeems");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set redeems(value: Array<string> | null) {
    if (value === null) {
      this.unset("redeems");
    } else {
      this.set("redeems", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class RedeemSeed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemSeed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemSeed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemSeed", id.toString(), this);
  }

  static load(id: string): RedeemSeed | null {
    return store.get("RedeemSeed", id) as RedeemSeed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get seedERC20(): string {
    let value = this.get("seedERC20");
    return value.toString();
  }

  set seedERC20(value: string) {
    this.set("seedERC20", Value.fromString(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get reserveAmount(): BigInt {
    let value = this.get("reserveAmount");
    return value.toBigInt();
  }

  set reserveAmount(value: BigInt) {
    this.set("reserveAmount", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TreasuryAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TreasuryAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TreasuryAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TreasuryAsset", id.toString(), this);
  }

  static load(id: string): TreasuryAsset | null {
    return store.get("TreasuryAsset", id) as TreasuryAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get trust(): string {
    let value = this.get("trust");
    return value.toString();
  }

  set trust(value: string) {
    this.set("trust", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get redeemableERC20(): string {
    let value = this.get("redeemableERC20");
    return value.toString();
  }

  set redeemableERC20(value: string) {
    this.set("redeemableERC20", Value.fromString(value));
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (value === null) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(value as BigInt));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (value === null) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(value as BigInt));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }
}
