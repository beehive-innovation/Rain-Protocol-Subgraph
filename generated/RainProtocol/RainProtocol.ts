// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewContract extends ethereum.Event {
  get params(): NewContract__Params {
    return new NewContract__Params(this);
  }
}

export class NewContract__Params {
  _event: NewContract;

  constructor(event: NewContract) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RainProtocol__createChildInputTrustFactoryTrustConfig_Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get minimumCreatorRaise(): BigInt {
    return this[1].toBigInt();
  }

  get seeder(): Address {
    return this[2].toAddress();
  }

  get seederFee(): BigInt {
    return this[3].toBigInt();
  }

  get seederUnits(): i32 {
    return this[4].toI32();
  }

  get seederCooldownDuration(): i32 {
    return this[5].toI32();
  }

  get redeemInit(): BigInt {
    return this[6].toBigInt();
  }
}

export class RainProtocol__createChildInputTrustFactoryTrustRedeemableERC20Config_Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get tier(): Address {
    return this[2].toAddress();
  }

  get minimumStatus(): i32 {
    return this[3].toI32();
  }

  get totalSupply(): BigInt {
    return this[4].toBigInt();
  }
}

export class RainProtocol__createChildInputTrustFactoryTrustRedeemableERC20PoolConfig_Struct extends ethereum.Tuple {
  get reserve(): Address {
    return this[0].toAddress();
  }

  get reserveInit(): BigInt {
    return this[1].toBigInt();
  }

  get initialValuation(): BigInt {
    return this[2].toBigInt();
  }

  get finalValuation(): BigInt {
    return this[3].toBigInt();
  }

  get minimumTradingDuration(): BigInt {
    return this[4].toBigInt();
  }
}

export class RainProtocol extends ethereum.SmartContract {
  static bind(address: Address): RainProtocol {
    return new RainProtocol("RainProtocol", address);
  }

  createChild(
    trustFactoryTrustConfig_: RainProtocol__createChildInputTrustFactoryTrustConfig_Struct,
    trustFactoryTrustRedeemableERC20Config_: RainProtocol__createChildInputTrustFactoryTrustRedeemableERC20Config_Struct,
    trustFactoryTrustRedeemableERC20PoolConfig_: RainProtocol__createChildInputTrustFactoryTrustRedeemableERC20PoolConfig_Struct
  ): Address {
    let result = super.call(
      "createChild",
      "createChild((address,uint256,address,uint256,uint16,uint16,uint256),(string,string,address,uint8,uint256),(address,uint256,uint256,uint256,uint256)):(address)",
      [
        ethereum.Value.fromTuple(trustFactoryTrustConfig_),
        ethereum.Value.fromTuple(trustFactoryTrustRedeemableERC20Config_),
        ethereum.Value.fromTuple(trustFactoryTrustRedeemableERC20PoolConfig_)
      ]
    );

    return result[0].toAddress();
  }

  try_createChild(
    trustFactoryTrustConfig_: RainProtocol__createChildInputTrustFactoryTrustConfig_Struct,
    trustFactoryTrustRedeemableERC20Config_: RainProtocol__createChildInputTrustFactoryTrustRedeemableERC20Config_Struct,
    trustFactoryTrustRedeemableERC20PoolConfig_: RainProtocol__createChildInputTrustFactoryTrustRedeemableERC20PoolConfig_Struct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createChild",
      "createChild((address,uint256,address,uint256,uint16,uint16,uint256),(string,string,address,uint8,uint256),(address,uint256,uint256,uint256,uint256)):(address)",
      [
        ethereum.Value.fromTuple(trustFactoryTrustConfig_),
        ethereum.Value.fromTuple(trustFactoryTrustRedeemableERC20Config_),
        ethereum.Value.fromTuple(trustFactoryTrustRedeemableERC20PoolConfig_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createChild1(data_: Bytes): Address {
    let result = super.call("createChild", "createChild(bytes):(address)", [
      ethereum.Value.fromBytes(data_)
    ]);

    return result[0].toAddress();
  }

  try_createChild1(data_: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("createChild", "createChild(bytes):(address)", [
      ethereum.Value.fromBytes(data_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isChild(maybeChild_: Address): boolean {
    let result = super.call("isChild", "isChild(address):(bool)", [
      ethereum.Value.fromAddress(maybeChild_)
    ]);

    return result[0].toBoolean();
  }

  try_isChild(maybeChild_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isChild", "isChild(address):(bool)", [
      ethereum.Value.fromAddress(maybeChild_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redeemableERC20Factory(): Address {
    let result = super.call(
      "redeemableERC20Factory",
      "redeemableERC20Factory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_redeemableERC20Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "redeemableERC20Factory",
      "redeemableERC20Factory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeemableERC20PoolFactory(): Address {
    let result = super.call(
      "redeemableERC20PoolFactory",
      "redeemableERC20PoolFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_redeemableERC20PoolFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "redeemableERC20PoolFactory",
      "redeemableERC20PoolFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seedERC20Factory(): Address {
    let result = super.call(
      "seedERC20Factory",
      "seedERC20Factory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_seedERC20Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "seedERC20Factory",
      "seedERC20Factory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get config_(): ConstructorCallConfig_Struct {
    return this._call.inputValues[0].value.toTuple() as ConstructorCallConfig_Struct;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallConfig_Struct extends ethereum.Tuple {
  get redeemableERC20Factory(): Address {
    return this[0].toAddress();
  }

  get redeemableERC20PoolFactory(): Address {
    return this[1].toAddress();
  }

  get seedERC20Factory(): Address {
    return this[2].toAddress();
  }
}

export class CreateChildCall extends ethereum.Call {
  get inputs(): CreateChildCall__Inputs {
    return new CreateChildCall__Inputs(this);
  }

  get outputs(): CreateChildCall__Outputs {
    return new CreateChildCall__Outputs(this);
  }
}

export class CreateChildCall__Inputs {
  _call: CreateChildCall;

  constructor(call: CreateChildCall) {
    this._call = call;
  }

  get trustFactoryTrustConfig_(): CreateChildCallTrustFactoryTrustConfig_Struct {
    return this._call.inputValues[0].value.toTuple() as CreateChildCallTrustFactoryTrustConfig_Struct;
  }

  get trustFactoryTrustRedeemableERC20Config_(): CreateChildCallTrustFactoryTrustRedeemableERC20Config_Struct {
    return this._call.inputValues[1].value.toTuple() as CreateChildCallTrustFactoryTrustRedeemableERC20Config_Struct;
  }

  get trustFactoryTrustRedeemableERC20PoolConfig_(): CreateChildCallTrustFactoryTrustRedeemableERC20PoolConfig_Struct {
    return this._call.inputValues[2].value.toTuple() as CreateChildCallTrustFactoryTrustRedeemableERC20PoolConfig_Struct;
  }
}

export class CreateChildCall__Outputs {
  _call: CreateChildCall;

  constructor(call: CreateChildCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateChildCallTrustFactoryTrustConfig_Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get minimumCreatorRaise(): BigInt {
    return this[1].toBigInt();
  }

  get seeder(): Address {
    return this[2].toAddress();
  }

  get seederFee(): BigInt {
    return this[3].toBigInt();
  }

  get seederUnits(): i32 {
    return this[4].toI32();
  }

  get seederCooldownDuration(): i32 {
    return this[5].toI32();
  }

  get redeemInit(): BigInt {
    return this[6].toBigInt();
  }
}

export class CreateChildCallTrustFactoryTrustRedeemableERC20Config_Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get tier(): Address {
    return this[2].toAddress();
  }

  get minimumStatus(): i32 {
    return this[3].toI32();
  }

  get totalSupply(): BigInt {
    return this[4].toBigInt();
  }
}

export class CreateChildCallTrustFactoryTrustRedeemableERC20PoolConfig_Struct extends ethereum.Tuple {
  get reserve(): Address {
    return this[0].toAddress();
  }

  get reserveInit(): BigInt {
    return this[1].toBigInt();
  }

  get initialValuation(): BigInt {
    return this[2].toBigInt();
  }

  get finalValuation(): BigInt {
    return this[3].toBigInt();
  }

  get minimumTradingDuration(): BigInt {
    return this[4].toBigInt();
  }
}

export class CreateChild1Call extends ethereum.Call {
  get inputs(): CreateChild1Call__Inputs {
    return new CreateChild1Call__Inputs(this);
  }

  get outputs(): CreateChild1Call__Outputs {
    return new CreateChild1Call__Outputs(this);
  }
}

export class CreateChild1Call__Inputs {
  _call: CreateChild1Call;

  constructor(call: CreateChild1Call) {
    this._call = call;
  }

  get data_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CreateChild1Call__Outputs {
  _call: CreateChild1Call;

  constructor(call: CreateChild1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class IsChildCall extends ethereum.Call {
  get inputs(): IsChildCall__Inputs {
    return new IsChildCall__Inputs(this);
  }

  get outputs(): IsChildCall__Outputs {
    return new IsChildCall__Outputs(this);
  }
}

export class IsChildCall__Inputs {
  _call: IsChildCall;

  constructor(call: IsChildCall) {
    this._call = call;
  }

  get maybeChild_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class IsChildCall__Outputs {
  _call: IsChildCall;

  constructor(call: IsChildCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
