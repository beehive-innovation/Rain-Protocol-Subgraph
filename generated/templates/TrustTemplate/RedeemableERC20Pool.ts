// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PhaseShiftScheduled extends ethereum.Event {
  get params(): PhaseShiftScheduled__Params {
    return new PhaseShiftScheduled__Params(this);
  }
}

export class PhaseShiftScheduled__Params {
  _event: PhaseShiftScheduled;

  constructor(event: PhaseShiftScheduled) {
    this._event = event;
  }

  get newPhaseBlock_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RedeemableERC20Pool extends ethereum.SmartContract {
  static bind(address: Address): RedeemableERC20Pool {
    return new RedeemableERC20Pool("RedeemableERC20Pool", address);
  }

  MIN_BALANCER_POOL_BALANCE(): BigInt {
    let result = super.call(
      "MIN_BALANCER_POOL_BALANCE",
      "MIN_BALANCER_POOL_BALANCE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_BALANCER_POOL_BALANCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_BALANCER_POOL_BALANCE",
      "MIN_BALANCER_POOL_BALANCE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_RESERVE_INIT(): BigInt {
    let result = super.call(
      "MIN_RESERVE_INIT",
      "MIN_RESERVE_INIT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_RESERVE_INIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_RESERVE_INIT",
      "MIN_RESERVE_INIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNINITIALIZED(): BigInt {
    let result = super.call("UNINITIALIZED", "UNINITIALIZED():(uint32)", []);

    return result[0].toBigInt();
  }

  try_UNINITIALIZED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("UNINITIALIZED", "UNINITIALIZED():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockNumberForPhase(phaseBlocks_: Array<BigInt>, phase_: i32): BigInt {
    let result = super.call(
      "blockNumberForPhase",
      "blockNumberForPhase(uint32[8],uint8):(uint32)",
      [
        ethereum.Value.fromUnsignedBigIntArray(phaseBlocks_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(phase_))
      ]
    );

    return result[0].toBigInt();
  }

  try_blockNumberForPhase(
    phaseBlocks_: Array<BigInt>,
    phase_: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blockNumberForPhase",
      "blockNumberForPhase(uint32[8],uint8):(uint32)",
      [
        ethereum.Value.fromUnsignedBigIntArray(phaseBlocks_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(phase_))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  crp(): Address {
    let result = super.call("crp", "crp():(address)", []);

    return result[0].toAddress();
  }

  try_crp(): ethereum.CallResult<Address> {
    let result = super.tryCall("crp", "crp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentPhase(): i32 {
    let result = super.call("currentPhase", "currentPhase():(uint8)", []);

    return result[0].toI32();
  }

  try_currentPhase(): ethereum.CallResult<i32> {
    let result = super.tryCall("currentPhase", "currentPhase():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  finalValuation(): BigInt {
    let result = super.call("finalValuation", "finalValuation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_finalValuation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "finalValuation",
      "finalValuation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finalWeight(): BigInt {
    let result = super.call("finalWeight", "finalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_finalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("finalWeight", "finalWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumTradingDuration(): BigInt {
    let result = super.call(
      "minimumTradingDuration",
      "minimumTradingDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumTradingDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumTradingDuration",
      "minimumTradingDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  phaseAtBlockNumber(phaseBlocks_: Array<BigInt>, blockNumber_: BigInt): i32 {
    let result = super.call(
      "phaseAtBlockNumber",
      "phaseAtBlockNumber(uint32[8],uint32):(uint8)",
      [
        ethereum.Value.fromUnsignedBigIntArray(phaseBlocks_),
        ethereum.Value.fromUnsignedBigInt(blockNumber_)
      ]
    );

    return result[0].toI32();
  }

  try_phaseAtBlockNumber(
    phaseBlocks_: Array<BigInt>,
    blockNumber_: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "phaseAtBlockNumber",
      "phaseAtBlockNumber(uint32[8],uint32):(uint8)",
      [
        ethereum.Value.fromUnsignedBigIntArray(phaseBlocks_),
        ethereum.Value.fromUnsignedBigInt(blockNumber_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  phaseBlocks(param0: BigInt): BigInt {
    let result = super.call("phaseBlocks", "phaseBlocks(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_phaseBlocks(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("phaseBlocks", "phaseBlocks(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserve(): Address {
    let result = super.call("reserve", "reserve():(address)", []);

    return result[0].toAddress();
  }

  try_reserve(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserve", "reserve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveInit(): BigInt {
    let result = super.call("reserveInit", "reserveInit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserveInit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserveInit", "reserveInit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get config_(): ConstructorCallConfig_Struct {
    return this._call.inputValues[0].value.toTuple() as ConstructorCallConfig_Struct;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallConfig_Struct extends ethereum.Tuple {
  get crpFactory(): Address {
    return this[0].toAddress();
  }

  get balancerFactory(): Address {
    return this[1].toAddress();
  }

  get reserve(): Address {
    return this[2].toAddress();
  }

  get token(): Address {
    return this[3].toAddress();
  }

  get reserveInit(): BigInt {
    return this[4].toBigInt();
  }

  get initialValuation(): BigInt {
    return this[5].toBigInt();
  }

  get finalValuation(): BigInt {
    return this[6].toBigInt();
  }

  get minimumTradingDuration(): BigInt {
    return this[7].toBigInt();
  }
}

export class OwnerEndDutchAuctionCall extends ethereum.Call {
  get inputs(): OwnerEndDutchAuctionCall__Inputs {
    return new OwnerEndDutchAuctionCall__Inputs(this);
  }

  get outputs(): OwnerEndDutchAuctionCall__Outputs {
    return new OwnerEndDutchAuctionCall__Outputs(this);
  }
}

export class OwnerEndDutchAuctionCall__Inputs {
  _call: OwnerEndDutchAuctionCall;

  constructor(call: OwnerEndDutchAuctionCall) {
    this._call = call;
  }
}

export class OwnerEndDutchAuctionCall__Outputs {
  _call: OwnerEndDutchAuctionCall;

  constructor(call: OwnerEndDutchAuctionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartDutchAuctionCall extends ethereum.Call {
  get inputs(): StartDutchAuctionCall__Inputs {
    return new StartDutchAuctionCall__Inputs(this);
  }

  get outputs(): StartDutchAuctionCall__Outputs {
    return new StartDutchAuctionCall__Outputs(this);
  }
}

export class StartDutchAuctionCall__Inputs {
  _call: StartDutchAuctionCall;

  constructor(call: StartDutchAuctionCall) {
    this._call = call;
  }
}

export class StartDutchAuctionCall__Outputs {
  _call: StartDutchAuctionCall;

  constructor(call: StartDutchAuctionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
